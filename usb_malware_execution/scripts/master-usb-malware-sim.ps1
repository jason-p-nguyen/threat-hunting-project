<#
.SYNOPSIS
Simulates USB-based malware execution with realistic user timing and artifact cleanup.

.DESCRIPTION
This PowerShell master script orchestrates a USB malware simulation by performing these actions in sequence:
1. Simulates mounting a USB drive (using a helper script).
2. Copies a malicious launcher script onto the simulated USB drive.
3. Executes the malicious launcher, which downloads and runs a fake malware payload.
4. Cleans up downloaded payload files and removes USB artifacts to mimic operational cover-up.
5. Simulates unmounting the USB drive.

This script is designed to generate realistic logs and artifacts useful for threat hunting and incident response training.

.PARAMETER None

.EXAMPLE
.\master-usb-malware-sim.ps1

.NOTES
Author: Jason Nguyen
Date: 2025-07-02
GitHub: https://github.com/jason-p-nguyen
Version: 2.0
#>

# --- CONFIGURATION ---
$usbDrive = "E:"
$usbSimFolder = "C:\SimulatedUSB"
$payloadFolder = "$usbDrive\Payload"
$maliciousLauncher = "malicious-usb-launcher.ps1"
$fakeMalwareUrl = "https://raw.githubusercontent.com/jason-p-nguyen/malware-sim/main/fake-malware.ps1"
$localPayloadPath = "C:\Temp\payload.ps1"

# --- ERROR HANDLER ---
$ErrorActionPreference = "Stop"

function Abort {
    param([string]$msg)
    Write-Error $msg
    exit 1
}

# --- STEP 1: Simulate USB Mount ---
Write-Host "`n[Step 1] Simulating USB mount (E:)..." -ForegroundColor Cyan
if (-Not (Test-Path $usbSimFolder)) {
    New-Item -ItemType Directory -Path $usbSimFolder -Force | Out-Null
    Write-Host "Created simulated USB folder: $usbSimFolder"
}
try {
    subst E: $usbSimFolder
    Start-Sleep -Seconds 5
    if (-Not (Test-Path $usbDrive)) {
        Abort "ERROR: Failed to simulate USB drive E:."
    }
    Write-Host "Successfully mapped $usbSimFolder to E:"
} catch {
    Abort "ERROR: Failed to create USB mount simulation. $_"
}

# --- STEP 2: Copy Malicious USB Launcher ---
Write-Host "`n[Step 2] Copying malicious USB launcher to $payloadFolder..." -ForegroundColor Cyan
try {
    if (-Not (Test-Path $payloadFolder)) {
        New-Item -ItemType Directory -Path $payloadFolder -Force | Out-Null
    }
    Copy-Item -Path ".\$maliciousLauncher" -Destination $payloadFolder -Force
    Write-Host "Copied $maliciousLauncher to $payloadFolder"
    Start-Sleep -Seconds 10
} catch {
    Abort "ERROR: Failed to copy launcher script. $_"
}

# --- STEP 3: Execute Malicious Launcher ---
Write-Host "`n[Step 3] Executing malicious launcher script..." -ForegroundColor Cyan
$launcherPath = Join-Path $payloadFolder $maliciousLauncher
try {
    Start-Process -FilePath "powershell.exe" -ArgumentList "-ExecutionPolicy Bypass -File `"$launcherPath`"" -Wait
    Write-Host "Malicious launcher executed."
    Start-Sleep -Seconds 15
} catch {
    Abort "ERROR: Failed to run launcher script. $_"
}

# --- STEP 4: Clean Up ---
Write-Host "`n[Step 4] Cleaning up malware artifacts..." -ForegroundColor Cyan
try {
    if (Test-Path $localPayloadPath) {
        Remove-Item -Path $localPayloadPath -Force
        Write-Host "Deleted downloaded payload: $localPayloadPath"
    }
    if (Test-Path $launcherPath) {
        Remove-Item -Path $launcherPath -Force
        Write-Host "Deleted USB launcher script: $launcherPath"
    }
    if (Test-Path $payloadFolder) {
        Remove-Item -Path $payloadFolder -Recurse -Force
        Write-Host "Removed Payload folder from USB"
    }
    Start-Sleep -Seconds 5
} catch {
    Write-Warning "WARNING: Cleanup failed. $_"
}

# --- STEP 5: Simulate USB Unmount ---
Write-Host "`n[Step 5] Unmounting simulated USB (E:)..." -ForegroundColor Cyan
try {
    subst E: /D
    Write-Host "USB drive E: successfully unmounted."
} catch {
    Abort "ERROR: Failed to unmount simulated USB drive. $_"
}

Write-Host "`nâœ… USB malware simulation completed successfully." -ForegroundColor Green
